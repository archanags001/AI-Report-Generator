from typing import List, Optional, Dict, Any
from pydantic import BaseModel, Field
from datetime import datetime

class DataProfile(BaseModel):
    """
    Represents a summarized profile of the uploaded dataset.
    """
    num_rows: int = Field(description="Number of rows in the dataset.")
    num_columns: int = Field(description="Number of columns in the dataset.")
    column_details: Dict[str, Dict[str, Any]] = Field(description="Dictionary of column names to their details (e.g., 'type', 'unique_values_count', 'missing_values_count', 'mean', 'std', 'min', 'max').")
    key_observations: str = Field(description="Key observations about the dataset's structure, quality, and potential issues (e.g., missing values, outliers, data types that need conversion).")

class AnalysisInsight(BaseModel):
    """
    Represents a single, actionable insight derived from data analysis.
    """
    insight_id: str = Field(description="Unique identifier for the insight.")
    title: str = Field(description="A concise, descriptive title for the insight.")
    narrative: str = Field(description="A detailed narrative explaining the insight, its context, and implications.")
    supporting_visual_ids: Optional[List[str]] = Field(default_factory=list, description="List of IDs of generated visuals that support this insight.")

class VisualGenerationInstruction(BaseModel):
    """
    Instructions for the LLM to suggest a specific visualization.
    """
    type: str = Field(description="Type of chart (e.g., 'bar', 'line', 'scatter', 'histogram', 'box').")
    columns: List[str] = Field(description="List of column names to be used for the chart.")
    title: Optional[str] = Field(default=None, description="Title for the chart.")
    description: str = Field(description="A brief explanation of what the chart should convey or highlight.")
    suggested_section: Optional[str] = Field(default=None, description="Where in a report this visual would best fit (e.g., 'Introduction', 'Sales Analysis', 'Customer Demographics', 'Conclusion').")

class GeneratedVisual(BaseModel):
    """
    Represents a visualization that has been successfully generated.
    """
    visual_id: str = Field(description="Unique identifier for the generated visual.")
    type: str = Field(description="Type of chart (e.g., 'bar', 'line', 'scatter', 'histogram', 'box').")
    description: str = Field(description="Description of what the visual depicts.")
    file_path: str = Field(description="Local file path where the generated chart image is saved.")
    suggested_section: str = Field(description="Suggested section in the report where this visual should be placed.")
    chart_code: Optional[str] = Field(default=None, description="The Python code used to generate the chart.")

class ReportSectionsDraft(BaseModel):
    """
    Represents the various sections of the report drafted by the LLM.
    """
    introduction_text: str = Field(description="A comprehensive introduction to the report.")
    analysis_narratives: List[str] = Field(description="Detailed analysis narratives, each describing a key finding.")
    key_takeaways_bullet_points: List[str] = Field(description="Concise, actionable key takeaways or main conclusions.")
    conclusion_text: str = Field(description="A summary conclusion for the entire report.")
    dataset_title: str = Field(description="A concise, descriptive title for the dataset, generated by the LLM.")
    figure_id_map: Dict[str, str] = Field(default_factory=dict, description="A mapping from generic figure placeholders (e.g., '[FIGURE 1]') used in narratives to their actual 'visual_id's. The LLM should create this map based on the order it refers to figures.")
    clarification_questions: List[str] = Field(default_factory=list, description="Questions for the user if more information is needed.")

class ReportFormat(BaseModel):
    """
    Represents the final generated report content and its format.
    """
    content: str = Field(description="The final report content, e.g., in Markdown format.")
    format_type: str = Field(description="The format of the report content (e.g., 'markdown', 'html', 'pdf_path').")
    pdf_file_path: Optional[str] = Field(default=None, description="Path to the generated PDF file, if applicable.")


class UserFeedback(BaseModel):
    """
    Represents feedback provided by the user for report refinement.
    """
    feedback_id: str = Field(description="Unique identifier for the feedback.")
    message: str = Field(description="The text content of the feedback.")
    timestamp: datetime = Field(default_factory=datetime.now, description="Timestamp when the feedback was provided.")

